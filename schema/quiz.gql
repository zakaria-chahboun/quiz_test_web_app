export const data = `
scalar JSONObject

type Quiz {
	id: ID!
	title: String!
	is_auth: Boolean!
	tests: [Test!]!
}
type Test {
	id: ID!
	question: String!
	options: JSONObject!
	notes: String
	score: Int!
}

## this is a special type, to return check mutations status .. if it's ok or not :)
type checkUserMutation{
	status: Boolean!
	message: String!
}
## this is a special type, to return two types of the same ID :)
type generateIDtype{
	realID: String!
	encryptID: String!
}

input QuizInput{
	id: ID!
	title: String!
	is_auth: Boolean!
	tests: [TestInput!]!
}

input TestInput{
	id: ID!
	question: String!
	options: [OptionInput!]!
	notes: String!
	score: Int!
}

input OptionInput{
	id: ID!
	text: String!
	isTrue: Boolean!
}

# input of mutation (partial updates) 'fields can be null' :D
input TestInputUpdate{
	id: ID!
	question: String
	options: [OptionInput!]
	notes: String
	score: Int
}

input QuizInputUpdate{
	id: ID!
	title: String
	is_auth: Boolean
}

# ------------------
type Query {
	quiz(whereID:ID, limit:Int):[Quiz!]!
	generateID:generateIDtype!
}

type Mutation{
createQuiz(data: QuizInput!):checkUserMutation!
deleteQuiz(id:ID!):checkUserMutation!
updateQuiz(data: QuizInputUpdate!):checkUserMutation!

addTest(quizID:ID!,data: TestInput!):checkUserMutation!
deleteTest(quizID:ID!,testID:ID!):checkUserMutation!
updateTest(quizID:ID!, data:TestInputUpdate!):checkUserMutation!

}
`